/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BatteryEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6455525538299807003L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BatteryEvent\",\"namespace\":\"avro\",\"fields\":[{\"name\":\"charging_source\",\"type\":[\"string\",\"null\"]},{\"name\":\"processor4_temp\",\"type\":[\"int\",\"null\"]},{\"name\":\"device_id\",\"type\":[\"string\",\"null\"]},{\"name\":\"processor2_temp\",\"type\":[\"int\",\"null\"]},{\"name\":\"processor1_temp\",\"type\":[\"int\",\"null\"]},{\"name\":\"charging\",\"type\":[\"int\",\"null\"]},{\"name\":\"current_capacity\",\"type\":[\"int\",\"null\"]},{\"name\":\"inverter_state\",\"type\":[\"int\",\"null\"]},{\"name\":\"moduleL_temp\",\"type\":[\"int\",\"null\"]},{\"name\":\"moduleR_temp\",\"type\":[\"int\",\"null\"]},{\"name\":\"processor3_temp\",\"type\":[\"int\",\"null\"]},{\"name\":\"soC_regulator\",\"type\":[\"float\",\"null\"]},{\"name\":\"time\",\"type\":[\"long\",\"null\"],\"logicalType\":\"local-timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BatteryEvent> ENCODER =
      new BinaryMessageEncoder<BatteryEvent>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BatteryEvent> DECODER =
      new BinaryMessageDecoder<BatteryEvent>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BatteryEvent> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BatteryEvent> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BatteryEvent> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BatteryEvent>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BatteryEvent to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BatteryEvent from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BatteryEvent instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BatteryEvent fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence charging_source;
   private java.lang.Integer processor4_temp;
   private java.lang.CharSequence device_id;
   private java.lang.Integer processor2_temp;
   private java.lang.Integer processor1_temp;
   private java.lang.Integer charging;
   private java.lang.Integer current_capacity;
   private java.lang.Integer inverter_state;
   private java.lang.Integer moduleL_temp;
   private java.lang.Integer moduleR_temp;
   private java.lang.Integer processor3_temp;
   private java.lang.Float soC_regulator;
   private java.lang.Long time;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BatteryEvent() {}

  /**
   * All-args constructor.
   * @param charging_source The new value for charging_source
   * @param processor4_temp The new value for processor4_temp
   * @param device_id The new value for device_id
   * @param processor2_temp The new value for processor2_temp
   * @param processor1_temp The new value for processor1_temp
   * @param charging The new value for charging
   * @param current_capacity The new value for current_capacity
   * @param inverter_state The new value for inverter_state
   * @param moduleL_temp The new value for moduleL_temp
   * @param moduleR_temp The new value for moduleR_temp
   * @param processor3_temp The new value for processor3_temp
   * @param soC_regulator The new value for soC_regulator
   * @param time The new value for time
   */
  public BatteryEvent(java.lang.CharSequence charging_source, java.lang.Integer processor4_temp, java.lang.CharSequence device_id, java.lang.Integer processor2_temp, java.lang.Integer processor1_temp, java.lang.Integer charging, java.lang.Integer current_capacity, java.lang.Integer inverter_state, java.lang.Integer moduleL_temp, java.lang.Integer moduleR_temp, java.lang.Integer processor3_temp, java.lang.Float soC_regulator, java.lang.Long time) {
    this.charging_source = charging_source;
    this.processor4_temp = processor4_temp;
    this.device_id = device_id;
    this.processor2_temp = processor2_temp;
    this.processor1_temp = processor1_temp;
    this.charging = charging;
    this.current_capacity = current_capacity;
    this.inverter_state = inverter_state;
    this.moduleL_temp = moduleL_temp;
    this.moduleR_temp = moduleR_temp;
    this.processor3_temp = processor3_temp;
    this.soC_regulator = soC_regulator;
    this.time = time;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return charging_source;
    case 1: return processor4_temp;
    case 2: return device_id;
    case 3: return processor2_temp;
    case 4: return processor1_temp;
    case 5: return charging;
    case 6: return current_capacity;
    case 7: return inverter_state;
    case 8: return moduleL_temp;
    case 9: return moduleR_temp;
    case 10: return processor3_temp;
    case 11: return soC_regulator;
    case 12: return time;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: charging_source = (java.lang.CharSequence)value$; break;
    case 1: processor4_temp = (java.lang.Integer)value$; break;
    case 2: device_id = (java.lang.CharSequence)value$; break;
    case 3: processor2_temp = (java.lang.Integer)value$; break;
    case 4: processor1_temp = (java.lang.Integer)value$; break;
    case 5: charging = (java.lang.Integer)value$; break;
    case 6: current_capacity = (java.lang.Integer)value$; break;
    case 7: inverter_state = (java.lang.Integer)value$; break;
    case 8: moduleL_temp = (java.lang.Integer)value$; break;
    case 9: moduleR_temp = (java.lang.Integer)value$; break;
    case 10: processor3_temp = (java.lang.Integer)value$; break;
    case 11: soC_regulator = (java.lang.Float)value$; break;
    case 12: time = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'charging_source' field.
   * @return The value of the 'charging_source' field.
   */
  public java.lang.CharSequence getChargingSource() {
    return charging_source;
  }


  /**
   * Sets the value of the 'charging_source' field.
   * @param value the value to set.
   */
  public void setChargingSource(java.lang.CharSequence value) {
    this.charging_source = value;
  }

  /**
   * Gets the value of the 'processor4_temp' field.
   * @return The value of the 'processor4_temp' field.
   */
  public java.lang.Integer getProcessor4Temp() {
    return processor4_temp;
  }


  /**
   * Sets the value of the 'processor4_temp' field.
   * @param value the value to set.
   */
  public void setProcessor4Temp(java.lang.Integer value) {
    this.processor4_temp = value;
  }

  /**
   * Gets the value of the 'device_id' field.
   * @return The value of the 'device_id' field.
   */
  public java.lang.CharSequence getDeviceId() {
    return device_id;
  }


  /**
   * Sets the value of the 'device_id' field.
   * @param value the value to set.
   */
  public void setDeviceId(java.lang.CharSequence value) {
    this.device_id = value;
  }

  /**
   * Gets the value of the 'processor2_temp' field.
   * @return The value of the 'processor2_temp' field.
   */
  public java.lang.Integer getProcessor2Temp() {
    return processor2_temp;
  }


  /**
   * Sets the value of the 'processor2_temp' field.
   * @param value the value to set.
   */
  public void setProcessor2Temp(java.lang.Integer value) {
    this.processor2_temp = value;
  }

  /**
   * Gets the value of the 'processor1_temp' field.
   * @return The value of the 'processor1_temp' field.
   */
  public java.lang.Integer getProcessor1Temp() {
    return processor1_temp;
  }


  /**
   * Sets the value of the 'processor1_temp' field.
   * @param value the value to set.
   */
  public void setProcessor1Temp(java.lang.Integer value) {
    this.processor1_temp = value;
  }

  /**
   * Gets the value of the 'charging' field.
   * @return The value of the 'charging' field.
   */
  public java.lang.Integer getCharging() {
    return charging;
  }


  /**
   * Sets the value of the 'charging' field.
   * @param value the value to set.
   */
  public void setCharging(java.lang.Integer value) {
    this.charging = value;
  }

  /**
   * Gets the value of the 'current_capacity' field.
   * @return The value of the 'current_capacity' field.
   */
  public java.lang.Integer getCurrentCapacity() {
    return current_capacity;
  }


  /**
   * Sets the value of the 'current_capacity' field.
   * @param value the value to set.
   */
  public void setCurrentCapacity(java.lang.Integer value) {
    this.current_capacity = value;
  }

  /**
   * Gets the value of the 'inverter_state' field.
   * @return The value of the 'inverter_state' field.
   */
  public java.lang.Integer getInverterState() {
    return inverter_state;
  }


  /**
   * Sets the value of the 'inverter_state' field.
   * @param value the value to set.
   */
  public void setInverterState(java.lang.Integer value) {
    this.inverter_state = value;
  }

  /**
   * Gets the value of the 'moduleL_temp' field.
   * @return The value of the 'moduleL_temp' field.
   */
  public java.lang.Integer getModuleLTemp() {
    return moduleL_temp;
  }


  /**
   * Sets the value of the 'moduleL_temp' field.
   * @param value the value to set.
   */
  public void setModuleLTemp(java.lang.Integer value) {
    this.moduleL_temp = value;
  }

  /**
   * Gets the value of the 'moduleR_temp' field.
   * @return The value of the 'moduleR_temp' field.
   */
  public java.lang.Integer getModuleRTemp() {
    return moduleR_temp;
  }


  /**
   * Sets the value of the 'moduleR_temp' field.
   * @param value the value to set.
   */
  public void setModuleRTemp(java.lang.Integer value) {
    this.moduleR_temp = value;
  }

  /**
   * Gets the value of the 'processor3_temp' field.
   * @return The value of the 'processor3_temp' field.
   */
  public java.lang.Integer getProcessor3Temp() {
    return processor3_temp;
  }


  /**
   * Sets the value of the 'processor3_temp' field.
   * @param value the value to set.
   */
  public void setProcessor3Temp(java.lang.Integer value) {
    this.processor3_temp = value;
  }

  /**
   * Gets the value of the 'soC_regulator' field.
   * @return The value of the 'soC_regulator' field.
   */
  public java.lang.Float getSoCRegulator() {
    return soC_regulator;
  }


  /**
   * Sets the value of the 'soC_regulator' field.
   * @param value the value to set.
   */
  public void setSoCRegulator(java.lang.Float value) {
    this.soC_regulator = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.Long getTime() {
    return time;
  }


  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.Long value) {
    this.time = value;
  }

  /**
   * Creates a new BatteryEvent RecordBuilder.
   * @return A new BatteryEvent RecordBuilder
   */
  public static avro.BatteryEvent.Builder newBuilder() {
    return new avro.BatteryEvent.Builder();
  }

  /**
   * Creates a new BatteryEvent RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BatteryEvent RecordBuilder
   */
  public static avro.BatteryEvent.Builder newBuilder(avro.BatteryEvent.Builder other) {
    if (other == null) {
      return new avro.BatteryEvent.Builder();
    } else {
      return new avro.BatteryEvent.Builder(other);
    }
  }

  /**
   * Creates a new BatteryEvent RecordBuilder by copying an existing BatteryEvent instance.
   * @param other The existing instance to copy.
   * @return A new BatteryEvent RecordBuilder
   */
  public static avro.BatteryEvent.Builder newBuilder(avro.BatteryEvent other) {
    if (other == null) {
      return new avro.BatteryEvent.Builder();
    } else {
      return new avro.BatteryEvent.Builder(other);
    }
  }

  /**
   * RecordBuilder for BatteryEvent instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BatteryEvent>
    implements org.apache.avro.data.RecordBuilder<BatteryEvent> {

    private java.lang.CharSequence charging_source;
    private java.lang.Integer processor4_temp;
    private java.lang.CharSequence device_id;
    private java.lang.Integer processor2_temp;
    private java.lang.Integer processor1_temp;
    private java.lang.Integer charging;
    private java.lang.Integer current_capacity;
    private java.lang.Integer inverter_state;
    private java.lang.Integer moduleL_temp;
    private java.lang.Integer moduleR_temp;
    private java.lang.Integer processor3_temp;
    private java.lang.Float soC_regulator;
    private java.lang.Long time;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(avro.BatteryEvent.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.charging_source)) {
        this.charging_source = data().deepCopy(fields()[0].schema(), other.charging_source);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.processor4_temp)) {
        this.processor4_temp = data().deepCopy(fields()[1].schema(), other.processor4_temp);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.device_id)) {
        this.device_id = data().deepCopy(fields()[2].schema(), other.device_id);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.processor2_temp)) {
        this.processor2_temp = data().deepCopy(fields()[3].schema(), other.processor2_temp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.processor1_temp)) {
        this.processor1_temp = data().deepCopy(fields()[4].schema(), other.processor1_temp);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.charging)) {
        this.charging = data().deepCopy(fields()[5].schema(), other.charging);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.current_capacity)) {
        this.current_capacity = data().deepCopy(fields()[6].schema(), other.current_capacity);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.inverter_state)) {
        this.inverter_state = data().deepCopy(fields()[7].schema(), other.inverter_state);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.moduleL_temp)) {
        this.moduleL_temp = data().deepCopy(fields()[8].schema(), other.moduleL_temp);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.moduleR_temp)) {
        this.moduleR_temp = data().deepCopy(fields()[9].schema(), other.moduleR_temp);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.processor3_temp)) {
        this.processor3_temp = data().deepCopy(fields()[10].schema(), other.processor3_temp);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.soC_regulator)) {
        this.soC_regulator = data().deepCopy(fields()[11].schema(), other.soC_regulator);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.time)) {
        this.time = data().deepCopy(fields()[12].schema(), other.time);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
    }

    /**
     * Creates a Builder by copying an existing BatteryEvent instance
     * @param other The existing instance to copy.
     */
    private Builder(avro.BatteryEvent other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.charging_source)) {
        this.charging_source = data().deepCopy(fields()[0].schema(), other.charging_source);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.processor4_temp)) {
        this.processor4_temp = data().deepCopy(fields()[1].schema(), other.processor4_temp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.device_id)) {
        this.device_id = data().deepCopy(fields()[2].schema(), other.device_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.processor2_temp)) {
        this.processor2_temp = data().deepCopy(fields()[3].schema(), other.processor2_temp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.processor1_temp)) {
        this.processor1_temp = data().deepCopy(fields()[4].schema(), other.processor1_temp);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.charging)) {
        this.charging = data().deepCopy(fields()[5].schema(), other.charging);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.current_capacity)) {
        this.current_capacity = data().deepCopy(fields()[6].schema(), other.current_capacity);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.inverter_state)) {
        this.inverter_state = data().deepCopy(fields()[7].schema(), other.inverter_state);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.moduleL_temp)) {
        this.moduleL_temp = data().deepCopy(fields()[8].schema(), other.moduleL_temp);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.moduleR_temp)) {
        this.moduleR_temp = data().deepCopy(fields()[9].schema(), other.moduleR_temp);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.processor3_temp)) {
        this.processor3_temp = data().deepCopy(fields()[10].schema(), other.processor3_temp);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.soC_regulator)) {
        this.soC_regulator = data().deepCopy(fields()[11].schema(), other.soC_regulator);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.time)) {
        this.time = data().deepCopy(fields()[12].schema(), other.time);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'charging_source' field.
      * @return The value.
      */
    public java.lang.CharSequence getChargingSource() {
      return charging_source;
    }


    /**
      * Sets the value of the 'charging_source' field.
      * @param value The value of 'charging_source'.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder setChargingSource(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.charging_source = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'charging_source' field has been set.
      * @return True if the 'charging_source' field has been set, false otherwise.
      */
    public boolean hasChargingSource() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'charging_source' field.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder clearChargingSource() {
      charging_source = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'processor4_temp' field.
      * @return The value.
      */
    public java.lang.Integer getProcessor4Temp() {
      return processor4_temp;
    }


    /**
      * Sets the value of the 'processor4_temp' field.
      * @param value The value of 'processor4_temp'.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder setProcessor4Temp(java.lang.Integer value) {
      validate(fields()[1], value);
      this.processor4_temp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'processor4_temp' field has been set.
      * @return True if the 'processor4_temp' field has been set, false otherwise.
      */
    public boolean hasProcessor4Temp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'processor4_temp' field.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder clearProcessor4Temp() {
      processor4_temp = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'device_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeviceId() {
      return device_id;
    }


    /**
      * Sets the value of the 'device_id' field.
      * @param value The value of 'device_id'.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder setDeviceId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.device_id = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'device_id' field has been set.
      * @return True if the 'device_id' field has been set, false otherwise.
      */
    public boolean hasDeviceId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'device_id' field.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder clearDeviceId() {
      device_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'processor2_temp' field.
      * @return The value.
      */
    public java.lang.Integer getProcessor2Temp() {
      return processor2_temp;
    }


    /**
      * Sets the value of the 'processor2_temp' field.
      * @param value The value of 'processor2_temp'.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder setProcessor2Temp(java.lang.Integer value) {
      validate(fields()[3], value);
      this.processor2_temp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'processor2_temp' field has been set.
      * @return True if the 'processor2_temp' field has been set, false otherwise.
      */
    public boolean hasProcessor2Temp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'processor2_temp' field.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder clearProcessor2Temp() {
      processor2_temp = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'processor1_temp' field.
      * @return The value.
      */
    public java.lang.Integer getProcessor1Temp() {
      return processor1_temp;
    }


    /**
      * Sets the value of the 'processor1_temp' field.
      * @param value The value of 'processor1_temp'.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder setProcessor1Temp(java.lang.Integer value) {
      validate(fields()[4], value);
      this.processor1_temp = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'processor1_temp' field has been set.
      * @return True if the 'processor1_temp' field has been set, false otherwise.
      */
    public boolean hasProcessor1Temp() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'processor1_temp' field.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder clearProcessor1Temp() {
      processor1_temp = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'charging' field.
      * @return The value.
      */
    public java.lang.Integer getCharging() {
      return charging;
    }


    /**
      * Sets the value of the 'charging' field.
      * @param value The value of 'charging'.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder setCharging(java.lang.Integer value) {
      validate(fields()[5], value);
      this.charging = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'charging' field has been set.
      * @return True if the 'charging' field has been set, false otherwise.
      */
    public boolean hasCharging() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'charging' field.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder clearCharging() {
      charging = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'current_capacity' field.
      * @return The value.
      */
    public java.lang.Integer getCurrentCapacity() {
      return current_capacity;
    }


    /**
      * Sets the value of the 'current_capacity' field.
      * @param value The value of 'current_capacity'.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder setCurrentCapacity(java.lang.Integer value) {
      validate(fields()[6], value);
      this.current_capacity = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'current_capacity' field has been set.
      * @return True if the 'current_capacity' field has been set, false otherwise.
      */
    public boolean hasCurrentCapacity() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'current_capacity' field.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder clearCurrentCapacity() {
      current_capacity = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'inverter_state' field.
      * @return The value.
      */
    public java.lang.Integer getInverterState() {
      return inverter_state;
    }


    /**
      * Sets the value of the 'inverter_state' field.
      * @param value The value of 'inverter_state'.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder setInverterState(java.lang.Integer value) {
      validate(fields()[7], value);
      this.inverter_state = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'inverter_state' field has been set.
      * @return True if the 'inverter_state' field has been set, false otherwise.
      */
    public boolean hasInverterState() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'inverter_state' field.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder clearInverterState() {
      inverter_state = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'moduleL_temp' field.
      * @return The value.
      */
    public java.lang.Integer getModuleLTemp() {
      return moduleL_temp;
    }


    /**
      * Sets the value of the 'moduleL_temp' field.
      * @param value The value of 'moduleL_temp'.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder setModuleLTemp(java.lang.Integer value) {
      validate(fields()[8], value);
      this.moduleL_temp = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'moduleL_temp' field has been set.
      * @return True if the 'moduleL_temp' field has been set, false otherwise.
      */
    public boolean hasModuleLTemp() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'moduleL_temp' field.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder clearModuleLTemp() {
      moduleL_temp = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'moduleR_temp' field.
      * @return The value.
      */
    public java.lang.Integer getModuleRTemp() {
      return moduleR_temp;
    }


    /**
      * Sets the value of the 'moduleR_temp' field.
      * @param value The value of 'moduleR_temp'.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder setModuleRTemp(java.lang.Integer value) {
      validate(fields()[9], value);
      this.moduleR_temp = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'moduleR_temp' field has been set.
      * @return True if the 'moduleR_temp' field has been set, false otherwise.
      */
    public boolean hasModuleRTemp() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'moduleR_temp' field.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder clearModuleRTemp() {
      moduleR_temp = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'processor3_temp' field.
      * @return The value.
      */
    public java.lang.Integer getProcessor3Temp() {
      return processor3_temp;
    }


    /**
      * Sets the value of the 'processor3_temp' field.
      * @param value The value of 'processor3_temp'.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder setProcessor3Temp(java.lang.Integer value) {
      validate(fields()[10], value);
      this.processor3_temp = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'processor3_temp' field has been set.
      * @return True if the 'processor3_temp' field has been set, false otherwise.
      */
    public boolean hasProcessor3Temp() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'processor3_temp' field.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder clearProcessor3Temp() {
      processor3_temp = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'soC_regulator' field.
      * @return The value.
      */
    public java.lang.Float getSoCRegulator() {
      return soC_regulator;
    }


    /**
      * Sets the value of the 'soC_regulator' field.
      * @param value The value of 'soC_regulator'.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder setSoCRegulator(java.lang.Float value) {
      validate(fields()[11], value);
      this.soC_regulator = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'soC_regulator' field has been set.
      * @return True if the 'soC_regulator' field has been set, false otherwise.
      */
    public boolean hasSoCRegulator() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'soC_regulator' field.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder clearSoCRegulator() {
      soC_regulator = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.Long getTime() {
      return time;
    }


    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder setTime(java.lang.Long value) {
      validate(fields()[12], value);
      this.time = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public avro.BatteryEvent.Builder clearTime() {
      time = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BatteryEvent build() {
      try {
        BatteryEvent record = new BatteryEvent();
        record.charging_source = fieldSetFlags()[0] ? this.charging_source : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.processor4_temp = fieldSetFlags()[1] ? this.processor4_temp : (java.lang.Integer) defaultValue(fields()[1]);
        record.device_id = fieldSetFlags()[2] ? this.device_id : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.processor2_temp = fieldSetFlags()[3] ? this.processor2_temp : (java.lang.Integer) defaultValue(fields()[3]);
        record.processor1_temp = fieldSetFlags()[4] ? this.processor1_temp : (java.lang.Integer) defaultValue(fields()[4]);
        record.charging = fieldSetFlags()[5] ? this.charging : (java.lang.Integer) defaultValue(fields()[5]);
        record.current_capacity = fieldSetFlags()[6] ? this.current_capacity : (java.lang.Integer) defaultValue(fields()[6]);
        record.inverter_state = fieldSetFlags()[7] ? this.inverter_state : (java.lang.Integer) defaultValue(fields()[7]);
        record.moduleL_temp = fieldSetFlags()[8] ? this.moduleL_temp : (java.lang.Integer) defaultValue(fields()[8]);
        record.moduleR_temp = fieldSetFlags()[9] ? this.moduleR_temp : (java.lang.Integer) defaultValue(fields()[9]);
        record.processor3_temp = fieldSetFlags()[10] ? this.processor3_temp : (java.lang.Integer) defaultValue(fields()[10]);
        record.soC_regulator = fieldSetFlags()[11] ? this.soC_regulator : (java.lang.Float) defaultValue(fields()[11]);
        record.time = fieldSetFlags()[12] ? this.time : (java.lang.Long) defaultValue(fields()[12]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BatteryEvent>
    WRITER$ = (org.apache.avro.io.DatumWriter<BatteryEvent>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BatteryEvent>
    READER$ = (org.apache.avro.io.DatumReader<BatteryEvent>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.charging_source == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.charging_source);
    }

    if (this.processor4_temp == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.processor4_temp);
    }

    if (this.device_id == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.device_id);
    }

    if (this.processor2_temp == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.processor2_temp);
    }

    if (this.processor1_temp == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.processor1_temp);
    }

    if (this.charging == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.charging);
    }

    if (this.current_capacity == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.current_capacity);
    }

    if (this.inverter_state == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.inverter_state);
    }

    if (this.moduleL_temp == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.moduleL_temp);
    }

    if (this.moduleR_temp == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.moduleR_temp);
    }

    if (this.processor3_temp == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.processor3_temp);
    }

    if (this.soC_regulator == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeFloat(this.soC_regulator);
    }

    if (this.time == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeLong(this.time);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 0) {
        in.readNull();
        this.charging_source = null;
      } else {
        this.charging_source = in.readString(this.charging_source instanceof Utf8 ? (Utf8)this.charging_source : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.processor4_temp = null;
      } else {
        this.processor4_temp = in.readInt();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.device_id = null;
      } else {
        this.device_id = in.readString(this.device_id instanceof Utf8 ? (Utf8)this.device_id : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.processor2_temp = null;
      } else {
        this.processor2_temp = in.readInt();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.processor1_temp = null;
      } else {
        this.processor1_temp = in.readInt();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.charging = null;
      } else {
        this.charging = in.readInt();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.current_capacity = null;
      } else {
        this.current_capacity = in.readInt();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.inverter_state = null;
      } else {
        this.inverter_state = in.readInt();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.moduleL_temp = null;
      } else {
        this.moduleL_temp = in.readInt();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.moduleR_temp = null;
      } else {
        this.moduleR_temp = in.readInt();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.processor3_temp = null;
      } else {
        this.processor3_temp = in.readInt();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.soC_regulator = null;
      } else {
        this.soC_regulator = in.readFloat();
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.time = null;
      } else {
        this.time = in.readLong();
      }

    } else {
      for (int i = 0; i < 13; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 0) {
            in.readNull();
            this.charging_source = null;
          } else {
            this.charging_source = in.readString(this.charging_source instanceof Utf8 ? (Utf8)this.charging_source : null);
          }
          break;

        case 1:
          if (in.readIndex() != 0) {
            in.readNull();
            this.processor4_temp = null;
          } else {
            this.processor4_temp = in.readInt();
          }
          break;

        case 2:
          if (in.readIndex() != 0) {
            in.readNull();
            this.device_id = null;
          } else {
            this.device_id = in.readString(this.device_id instanceof Utf8 ? (Utf8)this.device_id : null);
          }
          break;

        case 3:
          if (in.readIndex() != 0) {
            in.readNull();
            this.processor2_temp = null;
          } else {
            this.processor2_temp = in.readInt();
          }
          break;

        case 4:
          if (in.readIndex() != 0) {
            in.readNull();
            this.processor1_temp = null;
          } else {
            this.processor1_temp = in.readInt();
          }
          break;

        case 5:
          if (in.readIndex() != 0) {
            in.readNull();
            this.charging = null;
          } else {
            this.charging = in.readInt();
          }
          break;

        case 6:
          if (in.readIndex() != 0) {
            in.readNull();
            this.current_capacity = null;
          } else {
            this.current_capacity = in.readInt();
          }
          break;

        case 7:
          if (in.readIndex() != 0) {
            in.readNull();
            this.inverter_state = null;
          } else {
            this.inverter_state = in.readInt();
          }
          break;

        case 8:
          if (in.readIndex() != 0) {
            in.readNull();
            this.moduleL_temp = null;
          } else {
            this.moduleL_temp = in.readInt();
          }
          break;

        case 9:
          if (in.readIndex() != 0) {
            in.readNull();
            this.moduleR_temp = null;
          } else {
            this.moduleR_temp = in.readInt();
          }
          break;

        case 10:
          if (in.readIndex() != 0) {
            in.readNull();
            this.processor3_temp = null;
          } else {
            this.processor3_temp = in.readInt();
          }
          break;

        case 11:
          if (in.readIndex() != 0) {
            in.readNull();
            this.soC_regulator = null;
          } else {
            this.soC_regulator = in.readFloat();
          }
          break;

        case 12:
          if (in.readIndex() != 0) {
            in.readNull();
            this.time = null;
          } else {
            this.time = in.readLong();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










